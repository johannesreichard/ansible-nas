---
- name: Start unifi
  block:
    - name: Create unifi Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ unifi_data_directory }}"

    - name: Hello unifi Container
      community.docker.docker_container:
        name: "{{ unifi_container_name }}"
        image: "{{ unifi_image_name }}:{{ unifi_image_version }}"
        pull: true
        volumes:
          - "{{ unifi_data_directory }}:/config:rw"
        ports:
          - 8080:8080
          - 3478:3478/udp
          - 10001:10001/udp
          - "{{ unifi_port }}:8443"
          - 8843:8843 #optional
          - 8880:8880 #optional
          - 6789:6789 #optional
          - 5514:5514/udp #optional
          # - 1900:1900/udp # no idea if L2 Discovery works maybe doesn't get bound, create CMANE entry 'UNIFI' pointing on controller for auto-inform
        restart_policy: unless-stopped
        memory: "{{ unifi_memory }}"
        env:
          PUID: "1000"
          GUID: "1000"
        labels:
          traefik.enable: "{{ unifi_available_externally | string }}"
          traefik.http.routers.unifi.rule: "Host(`{{ unifi_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.unifi.tls: "true"
          traefik.http.routers.unifi.tls.certresolver: "letsencrypt"
          traefik.http.routers.unifi.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.unifi.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.unifi.loadbalancer.server.scheme: "https"
          traefik.http.services.unifi.loadbalancer.server.port: "8443"
          flame.type: "application"
          flame.name: "{{ unifi_hostname }}"
          flame.url: "{{ unifi_hostname }}.{{ ansible_nas_domain }}"
  when: unifi_enabled is true

- name: Stop unifi
  block:
    - name: Stop unifi
      community.docker.docker_container:
        name: "{{ unifi_container_name }}"
        state: absent
  when: unifi_enabled is false
